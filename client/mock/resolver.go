// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/linkerd/linkerd/mesh/core/src/main/protobuf (interfaces: ResolverClient)

// Package mock_protobuf is a generated GoMock package.
package mock_protobuf

import (
	gomock "github.com/golang/mock/gomock"
	protobuf "github.com/linkerd/linkerd/mesh/core/src/main/protobuf"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockResolverClient is a mock of ResolverClient interface
type MockResolverClient struct {
	ctrl     *gomock.Controller
	recorder *MockResolverClientMockRecorder
}

// MockResolverClientMockRecorder is the mock recorder for MockResolverClient
type MockResolverClientMockRecorder struct {
	mock *MockResolverClient
}

// NewMockResolverClient creates a new mock instance
func NewMockResolverClient(ctrl *gomock.Controller) *MockResolverClient {
	mock := &MockResolverClient{ctrl: ctrl}
	mock.recorder = &MockResolverClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResolverClient) EXPECT() *MockResolverClientMockRecorder {
	return m.recorder
}

// GetReplicas mocks base method
func (m *MockResolverClient) GetReplicas(arg0 context.Context, arg1 *protobuf.ReplicasReq, arg2 ...grpc.CallOption) (*protobuf.Replicas, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReplicas", varargs...)
	ret0, _ := ret[0].(*protobuf.Replicas)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplicas indicates an expected call of GetReplicas
func (mr *MockResolverClientMockRecorder) GetReplicas(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicas", reflect.TypeOf((*MockResolverClient)(nil).GetReplicas), varargs...)
}

// StreamReplicas mocks base method
func (m *MockResolverClient) StreamReplicas(arg0 context.Context, arg1 *protobuf.ReplicasReq, arg2 ...grpc.CallOption) (protobuf.Resolver_StreamReplicasClient, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StreamReplicas", varargs...)
	ret0, _ := ret[0].(protobuf.Resolver_StreamReplicasClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamReplicas indicates an expected call of StreamReplicas
func (mr *MockResolverClientMockRecorder) StreamReplicas(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamReplicas", reflect.TypeOf((*MockResolverClient)(nil).StreamReplicas), varargs...)
}

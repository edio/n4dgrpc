// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/linkerd/linkerd/mesh/core/src/main/protobuf (interfaces: Resolver_StreamReplicasClient)

// Package mock_protobuf is a generated GoMock package.
package mock_protobuf

import (
	gomock "github.com/golang/mock/gomock"
	protobuf "github.com/linkerd/linkerd/mesh/core/src/main/protobuf"
	context "golang.org/x/net/context"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockResolver_StreamReplicasClient is a mock of Resolver_StreamReplicasClient interface
type MockResolver_StreamReplicasClient struct {
	ctrl     *gomock.Controller
	recorder *MockResolver_StreamReplicasClientMockRecorder
}

// MockResolver_StreamReplicasClientMockRecorder is the mock recorder for MockResolver_StreamReplicasClient
type MockResolver_StreamReplicasClientMockRecorder struct {
	mock *MockResolver_StreamReplicasClient
}

// NewMockResolver_StreamReplicasClient creates a new mock instance
func NewMockResolver_StreamReplicasClient(ctrl *gomock.Controller) *MockResolver_StreamReplicasClient {
	mock := &MockResolver_StreamReplicasClient{ctrl: ctrl}
	mock.recorder = &MockResolver_StreamReplicasClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResolver_StreamReplicasClient) EXPECT() *MockResolver_StreamReplicasClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method
func (m *MockResolver_StreamReplicasClient) CloseSend() error {
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockResolver_StreamReplicasClientMockRecorder) CloseSend() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockResolver_StreamReplicasClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockResolver_StreamReplicasClient) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockResolver_StreamReplicasClientMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockResolver_StreamReplicasClient)(nil).Context))
}

// Header mocks base method
func (m *MockResolver_StreamReplicasClient) Header() (metadata.MD, error) {
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockResolver_StreamReplicasClientMockRecorder) Header() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockResolver_StreamReplicasClient)(nil).Header))
}

// Recv mocks base method
func (m *MockResolver_StreamReplicasClient) Recv() (*protobuf.Replicas, error) {
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*protobuf.Replicas)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockResolver_StreamReplicasClientMockRecorder) Recv() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockResolver_StreamReplicasClient)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockResolver_StreamReplicasClient) RecvMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockResolver_StreamReplicasClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockResolver_StreamReplicasClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method
func (m *MockResolver_StreamReplicasClient) SendMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockResolver_StreamReplicasClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockResolver_StreamReplicasClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockResolver_StreamReplicasClient) Trailer() metadata.MD {
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockResolver_StreamReplicasClientMockRecorder) Trailer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockResolver_StreamReplicasClient)(nil).Trailer))
}
